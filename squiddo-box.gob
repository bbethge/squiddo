%h{
#include <cairo.h>
%}

%{
#include <glib/gstdio.h>

#define BOX_ASPECT 2.0
#define LINE_WIDTH_RATIO 0.1 /* ratio of line width to box height */
%}

class Squiddo:Box from G:Object {

protected const gchar *path = NULL;
property STRING path
	(
		nick = "path",
		blurb = "The full path of the directory this box represents",
		default_value = "/",
		flags = CONSTRUCT_ONLY,
		export
	)
	set {
		self->path = g_value_dup_string(VAL);
		self->name = g_filename_display_basename(self->path);
	}
	get { g_value_set_string(VAL, self->path); };

protected const gchar *name = NULL destroywith g_free;
protected gboolean items_loaded = FALSE;
protected guint n_items;
/* protected GSList *items = NULL destroywith g_slist_free; */

public Squiddo:Box *new(const gchar *path (check null)) {
	return (Self*)g_object_new(
		TYPE_SELF, SQUIDDO_BOX_PROP_PATH(path), NULL
	);
}

protected void ensure_items_loaded(self) {
	GDir *dir;
	const gchar *name;
	if(self->items_loaded) return;
	dir = g_dir_open(self->path, 0, NULL);
	self->n_items = 0;
	if(dir != NULL) {
		for(;;) {
			name = g_dir_read_name(dir);
			if(name == NULL) break;
			self->n_items++;
		}
		g_dir_close(dir);
	}
	self->items_loaded = TRUE;
}

public void draw(
	self, cairo_t *cr (check null), double y1, double y2,
	double win_width, double win_height
) {
	/*
	 * height == n_items*item_height
	 *         + (n_items-1)*LINE_WIDTH_RATIO*item_height
	 */
	guint n_items = self->n_items;
	double width = (y2 - y1)*BOX_ASPECT;
	double item_height = (y2 - y1)/(n_items + (n_items-1)*LINE_WIDTH_RATIO);
	double item_width = item_height*BOX_ASPECT;
	double line_width = LINE_WIDTH_RATIO*item_height;
	double item_spacing = item_height + line_width;
	guint i;
	// cairo_set_font_size(cr, 0.3*(y2 - y1));
	// cairo_move_to(cr, win_width - width, 0.3*y1 + 0.7*y2);
	// cairo_show_text(cr, "root");
	self_ensure_items_loaded(self);
	for(i = 1; i < n_items; i++) {
		double y = y1 - 0.5*line_width + i*item_spacing;
		if(y > win_height || y + line_width < 0.0) continue;
		cairo_rectangle(
			cr, win_width - item_width,
			y, item_width, line_width
		);
	}
	cairo_fill(cr);
}

}
